---
title: Visualisation des données des vélos de Montréal
layout: default
output: bookdown::html_chapter
---



Traduction de l'[anglais](https://github.com/tdhock/animint-book/)
[Ch09-Montreal-bikes](https://raw.githubusercontent.com/tdhock/animint-book/master/Ch09-Montreal-bikes.Rmd)


<!-- paragraph -->

# Chapitre 9, visualisation des données sur les vélos de Montréal

<!-- paragraph -->

```{r setup, echo=FALSE}
knitr::opts_chunk$set(fig.path="Ch09-figures/")
```

<!-- paragraph -->

Dans ce chapitre, nous allons explorer plusieurs visualisations des données de l'ensemble de données sur les vélos de Montréal.

<!-- paragraph -->

Plan du chapitre :

<!-- paragraph -->

- Nous commençons par quelques visualisations des données statiques.
<!-- comment -->
- Nous créons une visualisation interactive de la fréquence des accidents dans le temps.
<!-- comment -->
- Nous créons une visualisation interactive des données avec quatre graphiques, montrant les tendances mensuelles des accidents, les détails quotidiens et une carte des emplacements des compteurs.

<!-- paragraph -->

## Chiffres statiques {#static}

<!-- paragraph -->

Nous commençons par charger le fichier `montreal.bikes` qui n'est pas disponible dans la version CRAN de animint2, afin d'économiser de l'espace sur le CRAN.
<!-- comment -->
Par conséquent, pour accéder à ce jeu de données, vous devrez installer animint2 depuis GitHub :

<!-- paragraph -->

```{r ghinstall}
tryCatch({
  data(montreal.bikes, package="animint2")
}, warning=function(w){
  devtools::install_github("tdhock/animint2")
})
```

<!-- paragraph -->

Nous commençons par examiner le tableau de données sur les accidents.

<!-- paragraph -->

```{r accidents}
library(animint2)
library(dplyr)
data(montreal.bikes) #only present if installed from github
Sys.setlocale("LC_ALL", "")

montreal.bikes$counter.locations <- montreal.bikes$counter.locations %>%
  mutate(across(where(is.character), ~ iconv(.x, from = "latin1", to = "UTF-8")))

  print(table(montreal.bikes$counter.counts$location))


library(data.table)
accidents.dt <- data.table(montreal.bikes$accidents)
str(accidents.dt)
```

<!-- paragraph -->

Chaque accident comporte des données sur sa date, son heure, sa localisation et le nombre de morts et de blessés légers/graves.
<!-- comment -->
Certaines valeurs sont en français (par exemple : position Voie de circulation, localisation En intersection, etc).

<!-- paragraph -->

Nous calculons la période de temps des accidents ci-dessous.

<!-- paragraph -->

```{r timeRange}
(accidents.dt[
, date.POSIXct := as.POSIXct(strptime(date.str, "%Y-%m-%d"))
][
, month.str := strftime(date.POSIXct, "%Y-%m")
][])
range(accidents.dt$month.str)
```

<!-- paragraph -->

Ci-dessous, nous calculons également la plage (ou l'intervalle) des mois pour le tableau de données du compteur de vélos.

<!-- paragraph -->

```{r counterRange}
(counts.dt <- data.table(montreal.bikes$counter.counts))
counts.dt[, month.str := strftime(date, "%Y-%m")]
range(counts.dt$month.str)
```

<!-- paragraph -->

Les comptages de vélos sont des données de séries temporelles que nous visualisons ci-dessous.

<!-- paragraph -->

```{r counterviz}
counts.dt[, loc.lines := gsub("[- _]", "\n", location)]
ggplot()+
  theme_bw()+
  theme(panel.margin=grid::unit(0, "lines"))+
  facet_grid(loc.lines ~ .)+
  geom_point(aes(
    date, count, color=count==0),
    shape=21,
    data=counts.dt)+
  scale_color_manual(values=c("TRUE"="grey", "FALSE"="black"))
```

<!-- paragraph -->

Tracé avec `geom_point` permet de voir facilement la différence entre les zéros et les valeurs manquantes.

<!-- paragraph -->

Nous allons calculer un résumé de tous les accidents par mois au cours de cette période, c'est pourquoi nous commençons par créer un tableau de données pour chaque mois ci-dessous.
<!-- comment -->
(et assurez-vous de définir l'environnement linguistique sur C pour les noms de mois en anglais)

<!-- paragraph -->

```{r months}
uniq.month.vec <- unique(c(
  accidents.dt$month.str,
  counts.dt$month.str))
one.day <- 60 * 60 * 24
months <- data.table(month.str=uniq.month.vec)[
, month01.str := paste0(month.str, "-01")
][
, month01.POSIXct := as.POSIXct(strptime(month01.str, "%Y-%m-%d"))
][, let(
  next.POSIXct = month01.POSIXct + one.day * 31,
  month.str = strftime(month01.POSIXct, "%B %Y")
)][
, next01.str := paste0(strftime(next.POSIXct, "%Y-%m"), "-01")
][
, next01.POSIXct := as.POSIXct(strptime(next01.str, "%Y-%m-%d"))
]
month.levs <- months[order(month01.POSIXct), month.str]
(months[, month := factor(month.str, month.levs)][])
```

<!-- paragraph -->

Notez que nous avons créé un `month` qui est un facteur ordonné par `month.levs`.

<!-- paragraph -->

```{r}
(accidents.dt[
, month.text := strftime(date.POSIXct, "%B %Y")
][
, month := factor(month.text, month.levs)
][
, month.POSIXct := as.POSIXct(strptime(paste0(month.str, "-15"), "%Y-%m-%d"))
][])
stopifnot(!is.na(accidents.dt$month.POSIXct))
(accidents.per.month <- accidents.dt[, list(
  total.accidents=.N,
  total.people=sum(deaths+people.severely.injured+people.slightly.injured),
  deaths=sum(deaths),
  people.severely.injured=sum(people.severely.injured),
  people.slightly.injured=sum(people.slightly.injured),
  next.POSIXct = month.POSIXct + one.day * 30,
  month01.str = paste0(strftime(month.POSIXct, "%Y-%m"), "-01")
), by=.(month, month.str, month.text, month.POSIXct)][, let(
  month01.POSIXct = as.POSIXct(strptime(month01.str, "%Y-%m-%d")),
  next01.str = paste0(strftime(next.POSIXct, "%Y-%m"), "-01")
)][
, next01.POSIXct := as.POSIXct(strptime(next01.str, "%Y-%m-%d"))
][])
```

<!-- paragraph -->

Nous traçons ci-dessous les accidents par mois.

<!-- paragraph -->

```{r accidentsPerMonth}
accidents.tall <- melt(
  accidents.per.month,
  measure.vars=c(
    "deaths", "people.severely.injured", "people.slightly.injured"),
  variable.name="severity",
  value.name="people")
severity.colors <- c(
    "people.slightly.injured"="#FEE0D2",#lite red
    "people.severely.injured"="#FB6A4A",
    deaths="#A50F15")#dark red
ggplot()+
  theme_bw()+
  geom_bar(aes(
    month.POSIXct, people, fill=severity),
    stat="identity",
    data=accidents.tall)+
  scale_fill_manual(values=severity.colors)
```

<!-- paragraph -->

Pour chaque accident, on dénombre les personnes décédées, les personnes gravement blessées et les personnes légèrement blessées.
<!-- comment -->
Ci-dessous, nous classons la gravité de chaque accident en fonction du résultat le plus grave pour les personnes touchées.

<!-- paragraph -->

```{r}
accidents.dt[
, severity.str := fcase(
  0 < deaths, "deaths",
  0 < people.severely.injured, "people.severely.injured",
  default="people.slightly.injured")
][
, severity := factor(severity.str, names(severity.colors))
][
, table(severity)
]
```

<!-- paragraph -->

Le résultat ci-dessus montre que les accidents avec des blessures légères sont les plus fréquents et que les accidents avec au moins un décès sont les moins fréquents.
<!-- comment -->
Ci-dessous, nous calculons les nombres par mois.

<!-- paragraph -->

```{r}
(counts.per.month <- counts.dt[, let(
  month.POSIXct = as.POSIXct(strptime(paste0(month.str, "-15"), "%Y-%m-%d")),
  month.text = strftime(date, "%B %Y"),
  day.of.the.month = as.integer(strftime(date, "%d"))
)][
, month := factor(month.text, month.levs)
][, list(
  days=.N,
  mean.per.day=mean(count),
  count=sum(count),
  month01.str = paste0(month.str, "-01")
), by=.(location, month, month.str, month.POSIXct)][
  0 < count
][
, month01.POSIXct := as.POSIXct(strptime(month01.str, "%Y-%m-%d"))
][
, next.POSIXct := month01.POSIXct + one.day * 31
][
, next01.str := paste0(strftime(next.POSIXct, "%Y-%m"), "-01")
][
, next01.POSIXct := as.POSIXct(strptime(next01.str, "%Y-%m-%d"))
][
, days.in.month := as.integer(round(difftime(next01.POSIXct,month01.POSIXct,units="days")))
][])
counts.per.month[days < days.in.month, {
  list(location, month, days, days.in.month)
}]
```

<!-- paragraph -->

Comme indiqué ci-dessus, certains mois ne comportent pas d'observations pour tous les jours.

<!-- paragraph -->

## Viz interactive de la fréquence des accidents {#regression}

<!-- paragraph -->

```{r Ch09-viz-regression}
complete.months <- counts.per.month[days == days.in.month]
month.labels <- counts.per.month[, {
  .SD[which.max(count), ]
}, by=location]
day.labels <- counts.dt[, {
  .SD[which.max(count), ]
}, by=.(location, month)]
(city.wide.cyclists <- counts.per.month[0 < count, list(
  locations=.N,
  count=sum(count),
  month01.str = paste0(month.str, "-01")
), by=.(month, month.str, month.POSIXct)][
, month01.POSIXct := as.POSIXct(strptime(month01.str, "%Y-%m-%d"))
][
, next.POSIXct := month01.POSIXct + one.day * 31
][
, next01.str := paste0(strftime(next.POSIXct, "%Y-%m"), "-01")
][
, next01.POSIXct := as.POSIXct(strptime(next01.str, "%Y-%m-%d"))
][])
month.str.vec <- strftime(seq(
  strptime("2012-01-15", "%Y-%m-%d"),
  strptime("2013-01-15", "%Y-%m-%d"),
  by="month"), "%Y-%m")
city.wide.complete <- complete.months[0 < count, list(
  locations=.N,
  count=sum(count),
  month01.str = paste0(month.str, "-01")
), by=.(month, month.str, month.POSIXct)]
setkey(city.wide.complete, month.str)
scatter.cyclists <- city.wide.complete[month.str.vec]
scatter.accidents <- accidents.per.month[scatter.cyclists, on=list(month.str)]
scatter.not.na <- scatter.accidents[!is.na(locations),]
scatter.max <- scatter.not.na[locations==max(locations)]
fit <- lm(total.accidents ~ count - 1, scatter.max)
scatter.max[
, pred.accidents := predict(fit)
][
, mean(total.accidents/count)
]
animint(
  regression=ggplot()+
    theme_bw()+
    ggtitle("Numbers of accidents and cyclists")+
    geom_line(aes(
      count, pred.accidents),
      color="grey",
      data=scatter.max)+
    geom_point(aes(
      count, total.accidents),
      shape=1,
      clickSelects="month",
      size=5,
      alpha=0.75,
      data=scatter.max)+
    ylab("Total bike accidents (all Montreal locations)")+
    xlab("Total cyclists (all Montreal locations)"),
  timeSeries=ggplot()+
    theme_bw()+
    ggtitle("Time series of accident frequency")+
    xlab("Month")+
    geom_point(aes(
      month.POSIXct, total.accidents/count),
      clickSelects="month",             
      size=5,
      alpha=0.75,
      data=scatter.max))
```

<!-- paragraph -->

La visualisation des données ci-dessus présente deux visualisations des données relatives à la fréquence des accidents à l'échelle de la ville au fil du temps.
<!-- comment -->
Le graphique de gauche montre que le nombre d'accidents augmente avec le nombre de cyclistes.
<!-- comment -->
Le graphique de droite montre la fréquence des accidents au fil du temps.

<!-- paragraph -->

## Viz interactive avec carte et détails {#details}

<!-- paragraph -->

Le graphique ci-dessous est un dotplot des accidents pour chaque mois.
<!-- comment -->
Chaque point représente une personne qui a eu un accident.

<!-- paragraph -->

```{r}
(accidents.cumsum <- accidents.dt[
  order(date.POSIXct, month, severity)
][
, accident.i := seq_along(severity)
, by=.(date.POSIXct, month)
][
, day.of.the.month := as.integer(strftime(date.POSIXct, "%d"))
][])
ggplot()+
  theme_bw()+
  theme(panel.margin=grid::unit(0, "cm"))+
  facet_wrap("month")+
  geom_text(aes(15, 25, label=month), data=accidents.per.month)+
  scale_fill_manual(values=severity.colors)+
  scale_x_continuous("day of the month", breaks=c(1, 10, 20, 30))+
  geom_point(aes(
    day.of.the.month, accident.i, fill=severity),
    shape=21,
    data=accidents.cumsum)
```

<!-- paragraph -->

```{r}
(counter.locations <- data.table(montreal.bikes$counter.locations)[, let(
  lon = coord_X,
  lat = coord_Y
)][])
loc.name.code <- c(
  "Berri1"="Berri",
  "Brebeuf"="Brébeuf",
  "CSC"="Côte-Sainte-Catherine",
  "Maisonneuve_1"="Maisonneuve 1",
  "Maisonneuve_2"="Maisonneuve 2",
  "Parc"="du Parc",
  "PierDup"="Pierre-Dupuy",
  "Rachel/Papineau"="Rachel",
  "Saint-Urbain"="Saint-Urbain",
  "Totem_Laurier"="Totem_Laurier")
counter.locations[, location := loc.name.code[nom_comptage] ]
velo.counts <- table(counts.dt$location)
(show.locations <- counter.locations[names(velo.counts), on=list(location)])
```

<!-- paragraph -->

Les localisations des compteurs ci-dessus seront tracées ci-dessous.
<!-- comment -->
Notez que nous utilisons `showSelected=month` et `clickSelects=location`.

<!-- paragraph -->

```{r}
map.lim <- show.locations[, list(
  range.lat=range(lat),
  range.lon=range(lon)
)]
diff.vec <- sapply(map.lim, diff)
diff.mat <- c(-1, 1) * matrix(diff.vec, 2, 2, byrow=TRUE)
scale.mat <- as.matrix(map.lim) + diff.mat
location.colors <-
  c("#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", 
    "#B3DE69", "#FCCDE5", "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")
names(location.colors) <- show.locations$location
counts.per.month.loc <- counts.per.month[show.locations, on=list(location)]
bike.paths <- data.table(montreal.bikes$path.locations)
some.paths <- bike.paths[
  scale.mat[1, "range.lat"] < lat &
    scale.mat[1, "range.lon"] < lon &
    lat < scale.mat[2, "range.lat"] &
    lon < scale.mat[2, "range.lon"]]
mtl.map <- ggplot()+
  theme_bw()+
  theme(
    panel.margin=grid::unit(0, "lines"),
    axis.line=element_blank(), axis.text=element_blank(), 
    axis.ticks=element_blank(), axis.title=element_blank(),
    panel.background = element_blank(),
    panel.border = element_blank())+
  coord_equal(xlim=map.lim$range.lon, ylim=map.lim$range.lat)+
  scale_color_manual(values=location.colors)+
  scale_x_continuous(limits=scale.mat[, "range.lon"])+
  scale_y_continuous(limits=scale.mat[, "range.lat"])+
  geom_path(aes(
    lon, lat,
    tooltip=TYPE_VOIE,
    group=paste(feature.i, path.i)),
    color="grey",
    data=some.paths)+
  guides(color="none")+
  geom_text(aes(
    lon, lat,
    label=location),
    clickSelects="location",
    data=show.locations)
mtl.map
```

<!-- paragraph -->

Le graphique ci-dessous montre la période pendant laquelle chaque compteur a fonctionné.
<!-- comment -->
Notez que nous utilisons `geom_tallrect` avec `clickSelects` pour sélectionner le mois.

<!-- paragraph -->

```{r}
location.ranges <- counts.per.month[0 < count, list(
  min=min(month.POSIXct),
  max=max(month.POSIXct)
), by=location]
accidents.range <- accidents.dt[, data.table(
  location="accidents",
  min=min(date.POSIXct),
  max=max(date.POSIXct))]
MonthSummary <- ggplot()+
  theme_bw()+
  theme_animint(width=450, height=250)+
  xlab("range of dates in data")+
  ylab("data type")+
  scale_color_manual(values=location.colors)+
  guides(color="none")+
  geom_segment(aes(
    min, location,
    xend=max, yend=location,
    color=location),
    clickSelects="location",
    data=location.ranges, alpha=3/4, size=10)+
  geom_segment(aes(
    min, location,
    xend=max, yend=location),
    color=severity.colors[["deaths"]],
    data=accidents.range,
    size=10)
print(MonthSummary)
```

<!-- paragraph -->

Le graphique ci-dessous présente les comptages de vélos à chaque localisation et chaque jour.

<!-- paragraph -->

```{r}
(dates <- counts.dt[, list(
  min.date = date-one.day/2,
  max.date = date+one.day/2,
  locations=sum(!is.na(count))
), by=list(date)][0 < locations])
(location.labels <- counts.dt[
, .SD[which.max(count)]
, by=list(location)])
TimeSeries <- ggplot()+
  theme_bw()+
  geom_tallrect(aes(
    xmin=date-one.day/2, xmax=date+one.day/2,
    clickSelects=date),
    data=dates, alpha=1/2)+
  geom_line(aes(
    date, count, group=location,
    showSelected=location,
    clickSelects=location),
    data=counts.dt)+
  scale_color_manual(values=location.colors)+
  geom_point(aes(
    date, count, color=location,
    showSelected=location,
    clickSelects=location),
    data=counts.dt)+
  geom_text(aes(
    date, count+200, color=location, label=location,
    showSelected=location,
    clickSelects=location),
    data=location.labels)
print(TimeSeries)
```

<!-- paragraph -->

Le graphique ci-dessous reprend les mêmes données mais pour chaque mois.

<!-- paragraph -->

```{r}
MonthSeries <- ggplot()+
  guides(color="none", fill="none")+
  theme_bw()+
  geom_tallrect(aes(
    xmin=month01.POSIXct, xmax=next01.POSIXct),
    clickSelects="month",    
    data=months,
    alpha=1/2)+
  geom_line(aes(
    month.POSIXct, count, group=location,
    color=location),
    showSelected="location",
    clickSelects="location",
    data=counts.per.month)+
  scale_color_manual(values=location.colors)+
  scale_fill_manual(values=location.colors)+
  xlab("month")+
  ylab("bike counts per month")+
  geom_point(aes(
    month.POSIXct, count, fill=location,
    tooltip=paste(
      count, "bikers counted at",
      location, "in", month)),
    showSelected="location",
    clickSelects="location",
    size=5,
    color="black",
    data=counts.per.month)+
  geom_text(aes(
    month.POSIXct, count+5000, color=location, label=location),
    showSelected="location",
    clickSelects="location",
    data=month.labels)
print(MonthSeries)
```

<!-- paragraph -->

```{r}
counter.title <- "mean cyclists per day"
accidents.title <- "city-wide accidents"
MonthFacet <- ggplot()+
  ggtitle("All data, select month")+
  guides(color="none", fill="none")+
  theme_bw()+
  facet_grid(facet ~ ., scales="free")+
  theme(panel.margin=grid::unit(0, "lines"))+
  geom_tallrect(aes(
    xmin=month01.POSIXct, xmax=next01.POSIXct),
    clickSelects="month",
    data=data.table(
      city.wide.cyclists,
      facet=counter.title),
    alpha=1/2)+
  geom_line(aes(
    month.POSIXct, mean.per.day, group=location,
    color=location),
    showSelected="location",
    clickSelects="location",
    data=data.table(counts.per.month, facet=counter.title))+
  scale_color_manual(values=location.colors)+
  xlab("month")+
  ylab("")+
  geom_point(aes(
    month.POSIXct, mean.per.day, color=location,
    tooltip=paste(
      count, "cyclists counted at",
      location, "in",
      days, "days of", month,
      sprintf("(mean %d cyclists/day)", as.integer(mean.per.day)))),
    showSelected="location",
    clickSelects="location",
    size=5,
    fill="grey",
    data=data.table(counts.per.month, facet=counter.title))+
  geom_text(aes(
    month.POSIXct, mean.per.day+300, color=location, label=location),
    showSelected="location",
    clickSelects="location",
    data=data.table(month.labels, facet=counter.title))+
  scale_fill_manual(values=severity.colors, breaks=names(severity.colors))+
  geom_bar(aes(
    month.POSIXct, people,
    fill=severity),
    showSelected="severity",
    stat="identity",
    position="identity",
    color=NA,
    data=data.table(accidents.tall, facet=accidents.title))+
  geom_tallrect(aes(
    xmin=month01.POSIXct, xmax=next01.POSIXct,
    tooltip=paste(
      ifelse(deaths==0, "",
      ifelse(deaths==1,
             "1 death,",
             paste(deaths, "deaths,"))),
      ifelse(people.severely.injured==0, "",
      ifelse(people.severely.injured==1,
             "1 person severely injured,",
             paste(people.severely.injured,
                   "people severely injured,"))),
      people.slightly.injured,
      "people slightly injured in",
      month)),
    clickSelects="month",
    alpha=0.5,
    data=data.table(accidents.per.month,
                    facet=accidents.title))
MonthFacet
```

<!-- paragraph -->

```{r}
(days.dt <- data.table(
  day.POSIXct=with(months, seq(
    min(month01.POSIXct),
    max(next01.POSIXct),
    by="day"))
)[
, day.of.the.week := strftime(day.POSIXct, "%a")
][])
## The following only works in locales with English days of the week.
(weekend.dt <- days.dt[
  day.of.the.week %in% c("Sat", "Sun")
][, let(
  month.text = strftime(day.POSIXct, "%B %Y"),
  day.of.the.month = as.integer(strftime(day.POSIXct, "%d"))
)][
, month := factor(month.text, month.levs)
][])
counter.title <- "cyclists per day"
DaysFacet <- ggplot()+
  ggtitle("Selected month (weekends in grey)")+
  geom_tallrect(aes(
    xmin=day.of.the.month-0.5, xmax=day.of.the.month+0.5,
    key=paste(day.POSIXct)),
    showSelected="month",
    fill="grey",
    color="white",
    data=weekend.dt)+
  guides(color="none")+
  theme_bw()+
  facet_grid(facet ~ ., scales="free")+
  geom_line(aes(
    day.of.the.month, count, group=location,
    key=location,
    color=location),
    showSelected=c("location", "month"),
    clickSelects="location",
    chunk_vars=c("month"),
    data=data.table(counts.dt, facet=counter.title))+
  scale_color_manual(values=location.colors)+
  ylab("")+
  geom_point(aes(
    day.of.the.month, count, color=location,
    key=paste(day.of.the.month, location),
    tooltip=paste(
      count, "cyclists counted at",
      location, "on",
      date)),
    showSelected=c("location", "month"),
    clickSelects="location",
    size=5,
    chunk_vars=c("month"),
    fill="white",
    data=data.table(counts.dt, facet=counter.title))+
  scale_fill_manual(values=severity.colors, breaks=names(severity.colors))+
  geom_text(aes(
    15, 23, label=month, key=1),
    showSelected="month",
    data=data.table(months, facet=accidents.title))+
  scale_x_continuous("day of the month", breaks=c(1, 10, 20, 30))+
  geom_text(aes(
    day.of.the.month, count+500, color=location, label=location,
    key=location),
    showSelected=c("location", "month"),
    clickSelects="location",
    data=data.table(day.labels, facet=counter.title))+
  geom_point(aes(
    day.of.the.month, accident.i,
    key=paste(date.str, accident.i),
    tooltip=paste(
      ifelse(deaths==0, "",
      ifelse(deaths==1,
             "1 death,",
             paste(deaths, "deaths,"))),
      ifelse(people.severely.injured==0, "",
      ifelse(people.severely.injured==1,
             "1 person severely injured,",
             paste(people.severely.injured,
                   "people severely injured,"))),
      people.slightly.injured,
      "people slightly injured at",
      ifelse(is.na(street.number), "", street.number),
      street, "/", cross.street,
      date.str, time.str),
    fill=severity),
    showSelected="month",
    size=4,
    chunk_vars=c("month"),
    data=data.table(accidents.cumsum, facet=accidents.title))
DaysFacet
```

<!-- paragraph -->

```{r Ch09-viz-mtl}
animint(
  MonthFacet,
  DaysFacet,
  MonthSummary,
  selector.types=list(severity="multiple"),
  duration=list(month=2000),
  first=list(
    location="Berri",
    month="September 2012"),
  time=list(variable="month", ms=5000))#buggy.
```

<!-- paragraph -->

## Résumé du chapitre et exercices {#exercises}

<!-- paragraph -->

Exercices :

<!-- paragraph -->

- Modifier la localisation à une variable de sélection multiple.
<!-- comment -->
- Ajouter un graphique pour la carte à la visualisation des données.
<!-- comment -->
- Sur la carte, dessinez un cercle pour chaque localisation, dont la taille varie en fonction de l'indice de référence. `count` des accidents dans la zone sélectionnée. `month`.
<!-- comment -->
- Sur le site de la `MonthSummary` graphique, ajoutez un rectangle d'arrière-plan qui peut être utilisé pour sélectionner les `month`.
<!-- comment -->
- Supprimer le `MonthSummary` et ajouter une visualisation similaire dans un troisième panneau de l'écran. `MonthFacet` graphique.

<!-- paragraph -->

Suivant, [Chapitre 10](Ch10-nearest-neighbors.html) explique comment visualiser le modèle d'apprentissage automatique des K-voisins les plus proches.

<!-- paragraph -->


