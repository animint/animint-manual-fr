---
title: Appendix, useful idioms
layout: default
output: bookdown::html_chapter
---

<!-- paragraph -->

```{r setup, echo=FALSE}
knitr::opts_chunk$set(fig.path="Ch99-figures/")
```

<!-- paragraph -->

This appendix describes several idioms which are useful for creating animints.

<!-- paragraph -->

## Space saving facets {#space-saving-facets}

<!-- paragraph -->

To emphasize the plotted data in facetted ggplots, eliminate the space between facets using the following idiom.

<!-- paragraph -->

```{r, eval=FALSE}
ggplot()+
  geom_point(aes(Petal.Width, Sepal.Width), iris)+
  theme_bw()+
  theme(panel.margin=grid::unit(0, "lines"))+
  facet_grid(. ~ Species)
```

<!-- paragraph -->

There are three parts of this idiom:

<!-- paragraph -->

- `panel.margin=0` eliminates space between panels.
<!-- comment -->
- `theme_bw` activates a black and white theme (black panel borders and white panel backgrounds).
<!-- comment -->
This is necessary in order to see the boundaries between panels, since the ggplot default `theme_grey` uses grey panel backgrounds and no panel borders.
<!-- comment -->
- `facet_\*` creates a multi-panel ggplot.

<!-- paragraph -->

Note that we use the grid unit `lines`, which equals the height of one line of text at the default size.
<!-- comment -->
This is the only grid unit which animint knows how to translate.
<!-- comment -->
It is not recommended to use other units such as `cm`.

<!-- paragraph -->

## List of data tables {#list-of-data-tables}

<!-- paragraph -->

The list of data tables idiom is very useful for creating interactive data visualizations of arbitrary complexity.
<!-- comment -->
The general form looks like

<!-- paragraph -->

```{r, eval=FALSE}
library(data.table)
outer.data.list <- list()
inner.data.list <- list()
for(outer in outer.vec){
  outer.dt <- computeOuter(outer)
  outer.data.list[[paste(outer)]] <- data.table(outer, outer.dt)
  for(inner in inner.vec){
    inner.dt <- computeInner(outer.dt, inner)
    inner.data.list[[paste(outer, inner)]] <-
      data.table(outer, inner, inner.dt)
  }
}
outer.data <- do.call(rbind, outer.data.list)
inner.data <- do.call(rbind, inner.data.list)
```

<!-- paragraph -->

Some comments:

<!-- paragraph -->

- The first part of the idiom involves initializing empty lists.
<!-- comment -->
Here there are two, `outer.data.list` and `inner.data.list`.
<!-- comment -->
However there can be as many as necessary.
<!-- comment -->
- The second part of the idiom is a bunch of nested for loops that assign data tables to elements of those lists.
<!-- comment -->
- Functions like `computeOuter` and `computeInner` can be used, or you can just do the computations directly inside the for loop.
<!-- comment -->
- To ensure that your code will run as fast as possible, use matrix-vector or vector-scalar operations in the innermost for loop.
<!-- comment -->
If you only do scalar-scalar operations in your innermost for loop, then you can definitely improve the performance of your code by removing that for loop and re-writing the computation in terms of vector-scalar operations.
<!-- comment -->
- The `paste` function is used to assign a `data.table` to a named list element.
<!-- comment -->
Although in principle one could use either `data.frame` or `data.table`, in practice `data.table` is often much faster during the last combination step.
<!-- comment -->
- The last part of the idiom uses `do.call` with `rbind` to combine the data tables stored during the for loops.

<!-- paragraph -->

## addColumn then facet {#addColumn-then-facet}

<!-- paragraph -->

This idiom is useful for creating multi-panel ggplots with aligned axes.
<!-- comment -->
First, define a function which takes as input a data table and one or more values which will be used to add factors to that data table.

<!-- paragraph -->

```{r, eval=FALSE}
addColumn <- function(df, time.period){
  data.frame(df, time.period=factor(time.period, c("1975", "1960-2010")))
}
animint(
  ggplot()+
  geom_point(aes(
    x=life.expectancy, y=fertility.rate, color=region),
    data=addColumn(WorldBank1975, "1975"))+
  geom_path(aes(
    x=life.expectancy, y=fertility.rate, color=region,
    group=country),
    data=addColumn(WorldBankBefore1975, "1975"))+
  geom_line(aes(
    x=year, y=fertility.rate, color=region, group=country),
    data=addColumn(WorldBank, "1960-2010"))+
  facet_grid(. ~ time.period, scales="free")+
  xlab(""))
```

<!-- paragraph -->

Note that `scales="free"` and `xlab("")` are used since the x axes now have very different units (year and life expectancy).

<!-- paragraph -->

## Manual color legends {#manual-color-legends}

<!-- paragraph -->

Color and fill legends in `ggplot2` can be manually specified via `scale_color_manual` and `scale_fill_manual`.
<!-- comment -->
Typically we will choose one of the ColorBrewer palettes:

<!-- paragraph -->

```{r, fig.height=8}
RColorBrewer::display.brewer.all()
```

<!-- paragraph -->

For example to get the R code for the Set1 palette, we can write

<!-- paragraph -->

```{r}
dput(RColorBrewer::brewer.pal(Inf, "Set1"))
```

<!-- paragraph -->

We can then copy that R code from the terminal and paste it into our text editor

<!-- paragraph -->

```{r}
data(WorldBank, package="animint2")
region.colors <- 
  c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00", "#FFFF33", 
    "#A65628", "#F781BF", "#999999")
names(region.colors) <- levels(WorldBank$region)
region.colors
```

<!-- paragraph -->

Then we can use it with `scale_color_manual`

<!-- paragraph -->

```{r}
library(animint2)
ggplot()+
  scale_color_manual(values=region.colors)+
  geom_point(aes(
    x=life.expectancy, y=fertility.rate, color=region),
    data=WorldBank)
```

<!-- paragraph -->


